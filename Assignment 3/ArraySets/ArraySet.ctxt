#BlueJ class context
comment0.target=ArraySet
comment0.text=\r\n\ \ ArraySet\ -\ a\ Set\ collection;\r\n\r\n\ \ The\ implementation\ uses\ an\ array\ to\ store\ the\ items\r\n\ \ and\ a\ count\ variable\ to\ store\ the\ number\ of\ items\ in\ the\ array.\r\n\ \r\n\ \ The\ items\ in\ the\ set\ should\ be\ stored\ in\ positions\r\n\ \ \ \ 0,\ 1,...\ (count-1)\ of\ the\ array.\r\n\ \r\n\ \ The\ length\ of\ the\ array\ when\ the\ set\ is\ first\ created\ should\ be\ 10.\ \r\n\ \r\n\ \ The\ items\ need\ not\ be\ in\ any\ particular\ order,\ and\ may\ change\ the\r\n\ \ \ \ order\ when\ an\ item\ is\ removed.\ There\ is\ no\ need\ to\ shift\ all\ the\ items\ \r\n\ \ \ \ up\ or\ down\ to\ keep\ them\ in\ a\ specific\ order.\r\n\ \r\n\ \ Note\ that\ a\ set\ does\ not\ allow\ null\ items\ or\ duplicates.\r\n\ \ Attempting\ to\ add\ null\ should\ throw\ an\ IllegalArgumentException\ exception\r\n\ \ Adding\ an\ item\ which\ is\ already\ present\ should\ simply\ return\ false,\ without\r\n\ \ \ \ changing\ the\ set.\r\n\ \ It\ should\ always\ compare\ items\ using\ equals()\ \ (not\ using\ \=\=)\r\n\ \ When\ the\ array\ is\ full,\ it\ will\ create\ a\ new\ array\ of\ double\ the\ current\r\n\ \ \ \ size,\ and\ copy\ all\ the\ items\ over\ to\ the\ new\ array\r\n
comment1.params=
comment1.target=ArraySet()
comment2.params=
comment2.target=int\ size()
comment2.text=\ \r\n\ @return\ the\ number\ of\ items\ in\ the\ set\ \ \r\n
comment3.params=item
comment3.target=boolean\ add(java.lang.Object)
comment3.text=\ \r\n\ \ Adds\ the\ specified\ item\ to\ this\ set\ \r\n\ \ (if\ it\ is\ not\ already\ in\ the\ set).\r\n\ \ Will\ not\ add\ a\ null\ value\ (throws\ an\ IllegalArgumentException\ in\ this\ case).\r\n\ \ \r\n\ \ @param\ item\ the\ item\ to\ be\ added\ to\ the\ set\r\n\ \ @return\ true\ if\ the\ collection\ changes,\ and\ false\ if\ it\ did\ not\ change.\r\n
comment4.params=item
comment4.target=boolean\ contains(java.lang.Object)
comment4.text=\ \r\n\ @return\ true\ if\ this\ set\ contains\ the\ specified\ item.\ \r\n\ \r\n
comment5.params=item
comment5.target=boolean\ remove(java.lang.Object)
comment5.text=\ \r\n\ \ Removes\ an\ item\ matching\ a\ given\ item.\r\n\ \ @return\ true\ if\ the\ item\ was\ present\ and\ then\ removed.\r\n\ \ Makes\ no\ changes\ to\ the\ set\ and\ returns\ false\ if\ the\ item\ is\ not\ present.\r\n
comment6.params=
comment6.target=void\ ensureCapacity()
comment6.text=\ \r\n\ \r\n\ Ensures\ data\ array\ has\ sufficient\ capacity\ (length)\r\n\ to\ accomodate\ a\ new\ item\ \r\n
comment7.params=item
comment7.target=int\ findIndexOf(java.lang.Object)
comment7.text=\ \r\n\ \ Finds\ the\ index\ of\ an\ item\ in\ the\ dataarray.\r\n\ \ Assumes\ that\ the\ item\ is\ not\ null.\r\n\ \ \r\n\ \ @return\ the\ index\ of\ the\ item,\ or\ -1\ if\ not\ present\r\n
comment8.params=
comment8.target=java.util.Iterator\ iterator()
comment8.text=\ \r\n\ @return\ an\ iterator\ over\ the\ items\ in\ this\ set.\ \r\n\ \r\n
numComments=9
