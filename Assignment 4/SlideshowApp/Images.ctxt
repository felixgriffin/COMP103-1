#BlueJ class context
comment0.target=Images
comment0.text=\r\n\ Class\ Images\ implements\ a\ list\ of\ images.\r\n\ \r\n\ Each\ image\ is\ represented\ with\ an\ ImageNode\ object.\r\n\ The\ ImageNode\ objects\ form\ a\ linked\ list.\ \r\n\ \r\n\ An\ object\ of\ this\ class\ maintains\ the\ reference\ to\ the\ first\ image\ node\ and\r\n\ delegates\ operations\ to\ image\ nodes\ as\ necessary.\ \r\n\ \r\n\ An\ object\ of\ this\ class\ furthermore\ maintains\ a\ "cursor",\ i.e.,\ a\ reference\ to\r\n\ a\ location\ in\ the\ list.\r\n\ \r\n\ The\ references\ to\ both\ first\ node\ and\ cursor\ may\ be\ null,\ representing\ an\ empty\r\n\ collection.\ \r\n\ \r\n\ @author\ Thomas\ Kuehne\r\n
comment1.params=
comment1.target=Images()
comment1.text=\r\n\ Creates\ an\ empty\ list\ of\ images.\r\n
comment10.params=imageFileName
comment10.target=void\ addImageAfter(java.lang.String)
comment10.text=\r\n\ Adds\ an\ image\ after\ the\ cursor\ position\r\n\ \r\n\ For\ the\ core\ part\ of\ the\ assignment.\r\n\ \r\n\ @param\ imageFileName\ the\ file\ name\ of\ the\ image\ to\ be\ added\r\n\ \r\n\ HINT\:\ Consider\ that\ the\ current\ collection\ may\ be\ empty.\r\n\ HINT\:\ Create\ a\ new\ image\ node\ here\ and\ and\ delegate\ further\ work\ to\ method\ 'insertAfter'\ of\ class\ ImageNode.\r\n\ HINT\:\ Pay\ attention\ to\ the\ cursor\ position\ after\ the\ image\ has\ been\ added.\ \r\n\ \r\n
comment11.params=imageFileName
comment11.target=void\ addImageBefore(java.lang.String)
comment11.text=\r\n\ Adds\ an\ image\ before\ the\ cursor\ position\r\n\ \r\n\ For\ the\ completion\ part\ of\ the\ assignment.\r\n\ \r\n\ @param\ imageFileName\ the\ file\ name\ of\ the\ image\ to\ be\ added\r\n\ \r\n\ HINT\:\ Create\ a\ new\ image\ node\ here\ and\ then\r\n\ \ \ \ \ \ \ \ \ 1.\ Consider\ that\ the\ current\ collection\ may\ be\ empty.\r\n\ \ \ \ \ \ \ \ \ 2.\ Consider\ that\ the\ head\ may\ need\ to\ be\ adjusted.\r\n\ \ \ \ \ \ \ \ \ 3.\ if\ necessary,\ delegate\ further\ work\ to\ 'insertBefore'\ of\ class\ ImageNode.\r\n\ HINT\:\ Pay\ attention\ to\ the\ cursor\ position\ after\ the\ image\ has\ been\ added.\ \r\n\ \r\n
comment12.params=
comment12.target=void\ removeAll()
comment12.text=\r\n\ Removes\ all\ images.\r\n\ \ \ \r\n\ For\ the\ core\ part\ of\ the\ assignment.\r\n
comment13.params=
comment13.target=void\ remove()
comment13.text=\r\n\ Removes\ an\ image\ at\ the\ cursor\ position\r\n\r\n\ For\ the\ core\ part\ of\ the\ assignment.\r\n\ \r\n\ HINT\:\ Consider\ that\ the\ list\ may\ be\ empty.\r\n\ \r\n\ HINT\:\ Handle\ removing\ at\ the\ very\ start\ of\ the\ list\ in\ this\ method\ and\ \r\n\ delegate\ the\ removal\ of\ other\ nodes\ by\ using\ method\ 'removeNodeUsingPrevious'\ from\ class\ ImageNode.\ \r\n\ \r\n\ HINT\:\ Make\ sure\ that\ the\ cursor\ position\ after\ the\ removal\ is\ correct.\ \r\n
comment14.params=
comment14.target=void\ reverseImages()
comment14.text=\r\n\ Reverses\ the\ order\ of\ the\ image\ list\ so\ that\ the\ last\ node\ is\ now\ the\ first\ node,\ and\ \r\n\ and\ the\ second-to-last\ node\ is\ the\ second\ node,\ and\ so\ on\r\n\ \r\n\ For\ the\ completion\ part\ of\ the\ assignment.\r\n\ \r\n\ HINT\:\ Make\ sure\ there\ is\ something\ worth\ reversing\ first.\r\n\ HINT\:\ You\ will\ have\ to\ use\ temporary\ variables.\r\n\ HINT\:\ Don't\ forget\ to\ update\ the\ head\ of\ the\ list.\r\n
comment15.params=
comment15.target=java.util.Iterator\ iterator()
comment15.text=\ \r\n\ @return\ an\ iterator\ over\ the\ items\ in\ this\ list\ of\ images.\ \r\n\ \r\n\ For\ the\ completion\ part\ of\ the\ assignment.\r\n\ \r\n
comment2.params=
comment2.target=java.lang.String\ getImageFileNameAtCursor()
comment2.text=\r\n\ @return\ the\ fileName\ of\ the\ image\ at\ the\ current\ cursor\ position.\r\n\ \r\n\ This\ method\ relieves\ clients\ of\ Images\ from\ knowing\ about\ image\r\n\ nodes\ and\ the\ 'getFileName()'\ method.\r\n
comment3.params=
comment3.target=ImageNode\ getCursor()
comment3.text=\r\n\ @return\ the\ current\ cursor\ position.\r\n\ \r\n\ Used\ by\ clients\ that\ want\ to\ save\ the\ current\ selection\r\n\ in\ order\ to\ restore\ it\ after\ an\ iteration.\r\n
comment4.params=newCursor
comment4.target=void\ setCursor(ImageNode)
comment4.text=\r\n\ Sets\ the\ cursor\ to\ a\ new\ node.\r\n\ \r\n\ @param\ newCursor\ the\ new\ cursor\ position\r\n
comment5.params=
comment5.target=void\ moveCursorToStart()
comment5.text=\r\n\ Positions\ the\ cursor\ at\ the\ start\r\n\ \ \ \ \r\n\ For\ the\ core\ part\ of\ the\ assignment.\r\n
comment6.params=
comment6.target=void\ moveCursorToEnd()
comment6.text=\r\n\ Positions\ the\ cursor\ at\ the\ end\r\n\r\n\ For\ the\ core\ part\ of\ the\ assignment.\r\n\ \r\n\ HINT\:\ Consider\ the\ list\ could\ be\ empty.\ \r\n
comment7.params=
comment7.target=void\ moveCursorRight()
comment7.text=\r\n\ Moves\ the\ cursor\ position\ to\ the\ right.\ \r\n
comment8.params=
comment8.target=void\ moveCursorLeft()
comment8.text=\r\n\ Moves\ the\ cursor\ position\ to\ the\ left.\r\n\ \r\n\ Assumption\:\ 'cursor'\ points\ to\ a\ node\ in\ the\ list\!\r\n
comment9.params=
comment9.target=int\ count()
comment9.text=\r\n\ Returns\ the\ number\ of\ images\r\n\ \r\n\ @return\ number\ of\ images\r\n
numComments=16
